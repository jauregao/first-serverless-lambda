service: second-project

useDotenv: true

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 512
  timeout: 10
  environment:
    USERS_TABLE: ${self:custom.usersTableName}

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
custom:
  usersTableName: usersTable-${self:provider.stage}

functions:
  user:
    handler: src/functions/user/user.createUser
    description: 'Create a new user'
    events:
      - http:
          path: users
          method: post
          cors: true
    role: dynamodbLambdaRole
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: country
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10
        
        GlobalSecondaryIndexes:
          - IndexName: createdAtIndex
            KeySchema:
              - AttributeName: country
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 10
    dynamodbLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: dynamodbLambdaRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                Action: sts:AssumeRole
        Policies:
          - PolicyName: dynamodbLambdaRole-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              iamRoleStatements:
                - Effect: 'Allow'
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join'
                    - ':'
                    - 
                      - 'arn:aws:logs'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource:
                    - 'Fn::Join'
                    - ':'
                    - 
                      - 'arn:aws:dynamodb'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'Fn::Join'
                      - ""
                      -
                        - 'table/'
                        - Ref: UsersTable